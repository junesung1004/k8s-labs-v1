# 워크플로우가 실행될 조건 (Triggers)
on:
  push:
    branches: ["main"]
    paths:
      - "apps/todo-list/backend/**"

# 실행될 작업(Job)들
# 파이프라인 설정
# 주요 작업 : 소스코드 빌드 & 테스트 -> 도커 이미지 빌드 & 배포
jobs:
  build-and-push:
    runs-on: ubuntu-latest # 운영체제 우분투 최신 버전 = 즉 Runner 라고 부른다.
    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout source code # 소스코드 가져온다. 어디로? runner에 있는 디렉토리에 가져온다.
        uses: actions/checkout@v4 # git init, git pull, 이러한 소스코드를 가져오는것을 수동해주고 그 명칭을 체크아웃이라고 부른다.

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      # 3. Gradle 캐싱
      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. gradlew에 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        working-directory: ./apps/todo-list/backend

      # 5. Gradle로 프로젝트 빌드
      - name: Build with Gradle
        run: ./gradlew build -x test
        working-directory: ./apps/todo-list/backend

      # 6. Docker Hub에 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 7. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: ./apps/todo-list/backend
          file: ./apps/todo-list/backend/Dockerfile.prod
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/k8s-labs-todo-backend:${{ github.sha }}

      # 8. 생성된 이미지 태그 출력
      - name: Print image tag
        run: echo "Image tagged with:${{ secrets.DOCKERHUB_USERNAME }}/k8s-labs-todo-backend:${{ github.sha }}"
